function PlotBinPowerAll(sbj_name,project_name,block_names,dirs,elecs1,elecs2,pairing,locktype,freq_band,column,conds,plot_params,regions)
%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs1, elecs2: pairs of electrodes b/w which to compute PLV
%                       (can either be vectors of elec #s or cells of elec names)
%       pairing: 'all' (compute PLV between all sites in elecs1 and all
%                       sites in elecs2) or
%                'one' (compute PLV between corresponding entries in elecs1
%                       and elecs2; elecs1 and elecs2 must be same size)
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)

%%
if isempty(plot_params)
    plot_params = genPlotParams(project_name,'timecourse');
end

nelec1 = length(elecs1);
nelec2 = length(elecs2);



% load globalVar
load([dirs.data_root,filesep,'originalData',filesep,sbj_name,filesep,'global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if iscell(elecs1)
    elecnums1 = ChanNamesToNums(globalVar,elecs1);
    elecnames1 = elecs1;
else
    elecnums1 = elecs1;
    elecnames1 = ChanNumsToNames(globalVar,elecs1);
end
if iscell(elecs2) % if names, convert to numbers
    elecnums2 = ChanNamesToNums(globalVar,elecs2);
    elecnames2 = elecs2;
else
    elecnums2 = elecs2;
    elecnames2 = ChanNumsToNames(globalVar,elecs2);
end

% if pairing all elecs1 to all elecs2, reshape them so one-to-one
if strcmp(pairing,'all')
    elecnums1 = repmat(elecnums1,[nelec2,1]);
    elecnums1 = reshape(elecnums1,[1,nelec1*nelec2]);
    elecnums2 = repmat(elecnums2,[1,nelec1]);
    
    elecnames1 = repmat(elecnames1,[nelec2,1]);
    elecnames1 = reshape(elecnames1,[1,nelec1*nelec2]);
    elecnames2 = repmat(elecnames2,[1,nelec1]);
end

tag = [locktype,'lock'];
if plot_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'wave'}; % concatenate phase across blocks

% if have previously run PLV on other pairs of elecrodes, load and append to
% file (rather than overwriting)
dir_out = [dirs.result_root,filesep,project_name,filesep,sbj_name,filesep,'allblocks',filesep,'binpower'];
fn = [dir_out,sbj_name,'_',project_name,'_BinPower_',freq_band,'.mat'];


if ~exist(dir_out,'dir')
    mkdir(dir_out)
end

for ei = 1
    data_tmp = concatBlocks(sbj_name,block_names,dirs,elecnums1(ei),freq_band,'Band',concatfield,tag);
    if isempty(conds)
        tmp = find(~cellfun(@isempty,(data_tmp.trialinfo.(column))));
        conds = unique(data_tmp.trialinfo.(column)(tmp));
    end
    [grouped_trials_all,grouped_condnames] = groupConds(conds,data_tmp.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,false);
end

for gi = 1:length(grouped_trials_all)
    numtrials_tot.(grouped_condnames{gi})=length(grouped_trials_all);
end
for ci = 1:length(conds)
    aveBinData.(conds{ci}).value=[];
    aveBinData.(conds{ci}).binlabel=[];
    aveBinData.(conds{ci}).regionlabel=[];
    
    for ei = 1:length(elecnums1)
        el1 = elecnums1(ei);
        el2 = elecnums2(ei);
        if el1 ~= el2
            % concatenate across blocks
            data_all1 = concatBlocks(sbj_name,block_names,dirs,el1,freq_band,'Band',concatfield,tag);
            data_all2 = concatBlocks(sbj_name,block_names,dirs,el2,freq_band,'Band',concatfield,tag);
            [grouped_trials_all1,~] = groupConds(conds,data_all1.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,false);
            [grouped_trials_all2,~] = groupConds(conds,data_all2.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,false);
            % separate by condition
            data_tmp1 = data_all1;
            data_tmp2 = data_all2;
            
            
            data_tmp1.wave = data_all1.wave(grouped_trials_all1{ci},:);
            data_tmp2.wave = data_all2.wave(grouped_trials_all2{ci},:);
            
            onset1=[];onset2=[];
            onset1=  cumsum(diff(data_all1.trialinfo.allonsets,1,2),2);
            onset2=  cumsum(diff(data_all2.trialinfo.allonsets,1,2),2);
            
            onset1=onset1(grouped_trials_all1{ci},:);
            onset2=onset2(grouped_trials_all2{ci},:);
            
            
            
            if ismember(conds{ci},'autobio')
                onset1(:,4)=nanmean(nanmean([onset1(:,1),diff(onset1,1,2)]))*ones(size(onset1,1),1)+onset1(:,3);
                onset2(:,4)=nanmean(nanmean([onset2(:,1),diff(onset2,1,2)]))*ones(size(onset2,1),1)+onset2(:,3);
            elseif ismember(conds{ci},'math')
                onset1(:,5)=nanmean(nanmean([onset1(:,1),diff(onset1,1,2)]))*ones(size(onset1,1),1)+onset1(:,4);
                onset2(:,5)=nanmean(nanmean([onset2(:,1),diff(onset2,1,2)]))*ones(size(onset2,1),1)+onset2(:,4);
            end
            % onset1=[-.5*ones(length(onset1),1),zeros(length(onset1),1),onset1];
            % onset2=[-.5*ones(length(onset2),1),zeros(length(onset2),1),onset2];
            
            onset1=[zeros(length(onset1),1),onset1];
            onset2=[zeros(length(onset2),1),onset2];
            
            % data1
            for ti=1:size(onset1,1)
                for bi=1:size (onset1,2)-1
                    tindx=[];
                    tindx=find(data_all1.time>=onset1(ti,bi)&data_all1.time<=onset1(ti,bi+1));
                    bindata1{ci}(ti,bi)=nanmean(data_tmp1.wave(ti,tindx));
                end
            end
            
            
            % data2
            
            for ti=1:size(onset2,1)
                for bi=1:size (onset2,2)-1
                    tindx=[];
                    tindx=find(data_all1.time>=onset2(ti,bi)&data_all2.time<=onset2(ti,bi+1));
                    bindata2{ci}(ti,bi)=nanmean(data_tmp2.wave(ti,tindx));
                end
            end
            
            
            if plot_params.devidemax
                trialmax1= repmat(max(abs(bindata1{ci}),[],2),1,size(bindata1{ci},2));
                bindata1{ci}=bindata1{ci}./trialmax1;
                
                trialmax2= repmat(max(abs(bindata2{ci}),[],2),1,size(bindata2{ci},2));
                bindata2{ci}=bindata2{ci}./trialmax2;
                
            end
            
            
            % data struct for boxplot
            bindata={'stim1';'stim2';'stim3';'stim4'};%'Biseline'
            bin_label1=sort(repmat(bindata,size(bindata1{ci},1),1));
            bin_label2=sort(repmat(bindata,size(bindata2{ci},1),1));
            bin_label=vertcat(bin_label1,bin_label2);
            
            r1={[regions{1},':',elecnames1{ei}]} ;
            r2={[regions{2},':',elecnames2{ei}]} ;
            r1_label= repmat(r1,numel(bindata1{ci}),1);
            r2_label= repmat(r2,numel(bindata2{ci}),1);
            
            r_label = vertcat(r1_label,r2_label);
            
            r1_label_tmp= repmat(regions(1),numel(bindata1{ci}),1);
            r2_label_tmp= repmat(regions(2),numel(bindata2{ci}),1);
            r_label_tmp = vertcat(r1_label_tmp,r2_label_tmp);
            
            tmpdata1=reshape(bindata1{ci},numel(bindata1{ci}),1);
            tmpdata2=reshape(bindata2{ci},numel(bindata2{ci}),1);
            tmpdata= vertcat(tmpdata1,tmpdata2);
            
            % boxplot
            
            
            clear g
            g=gramm('x',bin_label,'y',tmpdata,'color',r_label);
            g.stat_boxplot();
            g.set_color_options('map',plot_params.col)%'brewer_paired'
            g.set_title(['HFB Power Differences: ',conds{ci}]);
        
            if plot_params.devidemax
                g.set_names('x','Time Bins','y','z-scored power./max','color','Regions');
            else
                g.set_names('x','Time Bins','y','z-scored power','color','Regions');
            end
            g.set_text_options('base_size',16,'legend_scaling',1,'legend_title_scaling',1.2, 'title_scaling',1.2);
            
            figure('Position',[100 100 800 250]);
            g.draw();
            g.update()
            regtag=[regions{1},'_',regions{2}];
            % save picture
            if plot_params.devidemax
                fname=[sbj_name,'_',project_name,'_BinPower_',freq_band,'_',regtag,'_',elecnames1{ei},'_',elecnames2{ei},'_',conds{ci},'_devidemax'];
            else
                fname=[sbj_name,'_',project_name,'_BinPower_',freq_band,'_',regtag,'_',elecnames1{ei},'_',elecnames2{ei},'_',conds{ci}];
            end
            
            g.export('file_name',fname,'export_path',dir_out,'file_type','jpg')
            
            aveBinData.(conds{ci}).value=[aveBinData.(conds{ci}).value; tmpdata];
            aveBinData.(conds{ci}).binlabel=[aveBinData.(conds{ci}).binlabel; bin_label];
            aveBinData.(conds{ci}).regionlabel=[aveBinData.(conds{ci}).regionlabel;r_label_tmp];
        end
        
        %% plot group
    end
        
        clear g
        g=gramm('x',aveBinData.(conds{ci}).binlabel,'y',aveBinData.(conds{ci}).value,'color',aveBinData.(conds{ci}).regionlabel);
        g.stat_boxplot();
        g.set_color_options('map','brewer_paired')
        g.set_title([sbj_name,'Group HFB Power Differences: ',conds{ci}]);
        
        if plot_params.devidemax
            g.set_names('x','Time Bins','y','z-scored power./max','color','Regions');
        else
            g.set_names('x','Time Bins','y','z-scored power','color','Regions');
        end
        g.set_text_options('base_size',16,'legend_scaling',1,'legend_title_scaling',1.2, 'title_scaling',1.2);
        
        figure('Position',[100 100 800 250]);
        g.draw();
        g.update()
        
        % save picture
        if plot_params.devidemax
            fname=[sbj_name,'_Group_',project_name,'_BinPower_',freq_band,'_',regtag,conds{ci},'_devidemax'];
        else
            fname=[sbj_name,'_Group_',project_name,'_BinPower_',freq_band,'_',regtag,conds{ci}];
        end
        
        g.export('file_name',fname,'export_path',dir_out,'file_type','jpg')
        
        close;
   
end
save(fn,'aveBinData')
end


