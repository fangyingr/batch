function PlotAveragePower(sbj_name,project_name,block_names,dirs,elecs1,elecs2,pairing,locktype,freq_band,column,conds,plot_params,regions)
%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs1, elecs2: pairs of electrodes b/w which to compute PLV
%                       (can either be vectors of elec #s or cells of elec names)
%       pairing: 'all' (compute PLV between all sites in elecs1 and all
%                       sites in elecs2) or
%                'one' (compute PLV between corresponding entries in elecs1
%                       and elecs2; elecs1 and elecs2 must be same size)
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)

%%
if isempty(plot_params)
    plot_params = genPlotParams(project_name,'timecourse');
end
plot_params.col = [ 
    51,160,44
    251,154,153
    
    
    
    227,26,28
    178,223,138
    255,127,0
    178,223,138
    166,206,227
    227,26,28
    253,191,111
    202,178,214
    106,61,154
    31,120,180
    255,127,0]/255;

nelec1 = length(elecs1);
nelec2 = length(elecs2);



% load globalVar
load([dirs.data_root,filesep,'originalData',filesep,sbj_name,filesep,'global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if iscell(elecs1)
    elecnums1 = ChanNamesToNums(globalVar,elecs1);
    elecnames1 = elecs1;
else
    elecnums1 = elecs1;
    elecnames1 = ChanNumsToNames(globalVar,elecs1);
end
if iscell(elecs2) % if names, convert to numbers
    elecnums2 = ChanNamesToNums(globalVar,elecs2);
    elecnames2 = elecs2;
else
    elecnums2 = elecs2;
    elecnames2 = ChanNumsToNames(globalVar,elecs2);
end

% if pairing all elecs1 to all elecs2, reshape them so one-to-one
if strcmp(pairing,'all')
    elecnums1 = repmat(elecnums1,[nelec2,1]);
    elecnums1 = reshape(elecnums1,[1,nelec1*nelec2]);
    elecnums2 = repmat(elecnums2,[1,nelec1]);
    
    elecnames1 = repmat(elecnames1,[nelec2,1]);
    elecnames1 = reshape(elecnames1,[1,nelec1*nelec2]);
    elecnames2 = repmat(elecnames2,[1,nelec1]);
end

tag = [locktype,'lock'];
if plot_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'wave'}; % concatenate phase across blocks

% if have previously run PLV on other pairs of elecrodes, load and append
% to plot_params.averagewin
% file (rather than overwriting)
plot_params.averagewin=[0.5 1.5];
timetag=[num2str(1000*plot_params.averagewin(1)),'_',num2str(1000*plot_params.averagewin(2)),'ms'];
dir_out = [dirs.result_root,filesep,project_name,filesep,sbj_name,filesep,'allblocks',filesep,['averagepower',timetag],filesep,[regions{1},'_',regions{2}],filesep];
fn = [dir_out,sbj_name,'_',project_name,'_averagePower_',freq_band,'.mat'];
fn = [dir_out,sbj_name,'_',project_name,'_correlation_',freq_band,'.mat'];


if ~exist(dir_out,'dir')
    mkdir(dir_out)
end

for ei = 1:length(elecnums1)
    el1 = elecnums1(ei);
    el2 = elecnums2(ei);
    if el1 ~= el2
        
        
        % concatenate across blocks
        data_all1 = concatBlocks(sbj_name,block_names,dirs,el1,freq_band,'Band',concatfield,tag);
        data_all2 = concatBlocks(sbj_name,block_names,dirs,el2,freq_band,'Band',concatfield,tag);
        [grouped_trials_all1,~] = groupConds(conds,data_all1.trialinfo,column,'timepts',plot_params.noise_fields_timepts,false);
        [grouped_trials_all2,~] = groupConds(conds,data_all2.trialinfo,column,'timepts',plot_params.noise_fields_timepts,false);
        % [grouped_trials_all1,~] = groupConds(conds,data_all1.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,false);
        %[grouped_trials_all2,~] = groupConds(conds,data_all2.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,false);
        
        timeindx=find(data_all1.time>=plot_params.averagewin(1) & data_all1.time<=plot_params.averagewin(2));
        
        
        
        %% remove ourliers for each condition
        % concatenate all conditons
        elecs_trials=[];
        for ci=1:length(conds)
            cdata_tmp1 =[];
            cdata_tmp2 =[];
            cdata_tmp1 = nanmean(data_all1.wave(grouped_trials_all1{ci},timeindx),2);
            cdata_tmp2 = nanmean(data_all2.wave(grouped_trials_all2{ci},timeindx),2);
            max1=nanmean(cdata_tmp1)+3*nanstd(cdata_tmp1);
            min1=nanmean(cdata_tmp1)-3*nanstd(cdata_tmp1);
            
            max2=nanmean(cdata_tmp2)+3*nanstd(cdata_tmp2);
            min2=nanmean(cdata_tmp2)-3*nanstd(cdata_tmp2);
            
            outlier1=[];
            outlier2=[];
            outlier1=grouped_trials_all1{ci}(cdata_tmp1>=max1 | cdata_tmp1<= min1);
            outlier2=grouped_trials_all2{ci}(cdata_tmp2>=max2 | cdata_tmp2<= min2);
            
            trials_all{ci}=setdiff(grouped_trials_all1{ci},union(outlier1,outlier2));
            elecs_trials=[elecs_trials;trials_all{ci}];
        end
        
        
        data_tmp1 = nanmean(data_all1.wave(elecs_trials,timeindx),2);
        data_tmp2 = nanmean(data_all2.wave(elecs_trials,timeindx),2);
        
        
        [selecs_trials,newind]=sort(elecs_trials);
        
        data_tmp1=data_tmp1(newind);
        data_tmp2=data_tmp2(newind);
        
        for ci = 1:length(conds)
            
            cond_trial_indx{ci}=find(ismember(selecs_trials,trials_all{ci})==1);
            cond_data_tmp1{ci}=data_tmp1(cond_trial_indx{ci});
            cond_data_tmp2{ci}=data_tmp2(cond_trial_indx{ci});
        end
        
        
        %% Start plot
        
        title_conds = conds{1};
        for ci = 2:length(conds)
            title_conds = [title_conds,'_',conds{ci}];
        end
        %% plot elec1
        trialnum=1:length(data_tmp1);
        figureDim = [0 0 .6 .3];
        figure('units', 'normalized', 'outerposition', figureDim)
        
        plot(trialnum,data_tmp1,'color',[0.2 0.2 0.2] ,'LineWidth',2)
        hold on
        
        for ci=1:length(conds)
            plot(cond_trial_indx{ci},cond_data_tmp1{ci},'c.','MarkerSize',50,'Color',plot_params.col(ci,:))
            hold on
        end
        
        
        xlim([0,length(data_tmp1)]);
        plot(xlim,[0 0], 'Color', [0 0 0],'LineWidth',1)
        
        xlabel('Trial Number','Color',[1 1 1]);
        ylabel('Z-score Power');
        %set(gca,'tickdir','out')
        set(gca,'fontsize',28)
        set(gcf,'color','w')
        %set(gca,'looseInset',[0 0 0 0])
        set(gca,'linewidth',2)
        box off
        title([regions{1},' HFB trial response'],'fontsize',28)
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock_%s.png',dir_out,sbj_name,elecnames1{ei},title_conds,project_name,freq_band,locktype,regions{1});
        savePNG(gcf, 300, pn_out)
        
        
        %% plot elec2
        
        trialnum=1:length(data_tmp2);
        clf
        plot(trialnum,data_tmp2,'color',[0.6 0.6 0.6] ,'LineWidth',2)
        hold on
        
        for ci=1:length(conds)
            plot(cond_trial_indx{ci},cond_data_tmp2{ci},'c.','MarkerSize',50,'Color',plot_params.col(ci,:))
            hold on
        end
        
        xlim([0,length(data_tmp2)]);
        plot(xlim,[0 0], 'Color', [0 0 0],'LineWidth',1)
        xlabel('Trial Number','Color',[1 1 1]);
        ylabel('Z-score Power');
        %set(gca,'tickdir','out')
        set(gca,'fontsize',28)
        set(gcf,'color','w')
        %set(gca,'looseInset',[0 0 0 0])
        set(gca,'linewidth',2)
        box off
        title([regions{2},' HFB trial response'],'fontsize',28)
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock_%s.png',dir_out,sbj_name,elecnames2{ei},title_conds,project_name,freq_band,locktype,regions{2});
        savePNG(gcf, 300, pn_out)
        %% plot two elecs
        
        clf;
        figure('units', 'normalized', 'outerposition', figureDim)
        
        plot(trialnum,data_tmp1,'color',[0.2 0.2 0.2] ,'LineWidth',2)
        hold on
        
        plot(trialnum,data_tmp2,'color',[0.6 0.6 0.6] ,'LineWidth',2)
        hold on
        
        
        xlim([0,length(data_tmp2)]);
        plot(xlim,[0 0], 'Color', [0 0 0],'LineWidth',1)
        xlabel('Trial Number');
        ylabel('Z-score Power');
        %set(gca,'tickdir','out')
        set(gca,'fontsize',28)
        set(gcf,'color','w')
        %set(gca,'looseInset',[0 0 0 0])
        set(gca,'linewidth',2)
        box off
        title([regions{1},' & ',regions{2},' HFB trial response'],'fontsize',28)
        eleclabels=[elecnames1{ei},'_',elecnames2{ei}];
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock.png',dir_out,sbj_name,eleclabels,title_conds,project_name,freq_band,locktype);
        savePNG(gcf, 300, pn_out)
        
        
        conds={'memory','math'}
        %% plot dot elecs1
        close all
        figureDim = [0 0 .2 .3];
        figure('units', 'normalized', 'outerposition', figureDim)
        set(gcf,'color','w')
        set(gca,'fontsize',28)
        
        for ci=1:length(conds)
            xx=ci*ones(length(cond_data_tmp1{ci}),1);
            plot(xx,cond_data_tmp1{ci},'c.','MarkerSize',50,'Color',plot_params.col(ci,:))
            hold on
        end
        
        xlim([0 3])
        plot(xlim,[0 0], 'Color', [0 0 0],'LineWidth',2)
        set(gca,'xtick',[],'xticklabel',[])
        set(gca,'XColor','white')
        
        % ylabel('Z-score Power');
        hl= legend(conds,'Location','eastoutside');
        set(hl,'Box','off');
        set(gca,'fontsize',28)
        set(gca,'linewidth',2)
        box off
        title('All trial','fontsize',28);
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock_%s_dot.png',dir_out,sbj_name,elecnames1{ei},title_conds,project_name,freq_band,locktype,regions{1});
        savePNG(gcf, 300, pn_out)
        %% plot dot elecs2
        clf
        set(gcf,'color','w')
        set(gca,'fontsize',28)
        
        for ci=1:length(conds)
            xx=ci*ones(length(cond_data_tmp2{ci}),1);
            plot(xx,cond_data_tmp2{ci},'c.','MarkerSize',50,'Color',plot_params.col(ci,:))
            hold on
        end
        
        xlim([0 3])
        plot(xlim,[0 0], 'Color', [0 0 0],'LineWidth',2)
        set(gca,'xtick',[],'xticklabel',[])
        set(gca,'XColor','white')
        
        % ylabel('Z-score Power');
        hl= legend(conds,'Location','eastoutside');
        set(hl,'Box','off');
        set(gca,'fontsize',28)
        set(gca,'linewidth',2)
        box off
        title('All trial','fontsize',28);
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock_%s_dot.png',dir_out,sbj_name,elecnames2{ei},title_conds,project_name,freq_band,locktype,regions{2});
        savePNG(gcf, 300, pn_out)
        %% plot correlation
        
        close all
        figureDim = [0 0 .2 .3];
        figure('units', 'normalized', 'outerposition', figureDim)
        set(gcf,'color','w')
        set(gca,'fontsize',28)
        
        for ci=1:length(conds)
            plot(cond_data_tmp1{ci},cond_data_tmp2{ci},'c.','MarkerSize',50,'Color',plot_params.col(ci,:))
            hold on
        end
        
        p= polyfit(data_tmp1,data_tmp2,1);
        x1=linspace(min(data_tmp1),max(data_tmp1));
        y1=polyval(p,x1);
        
        plot(x1,y1,'color',[0 0 0],'LineWidth',2.5);
        
        xlabel([regions{1},'(HFB)'])
        ylabel([regions{2},'(HFB)'])
        x_lim=xlim;
        y_lim=ylim;
        xlim([min(data_tmp1)-2.5,x_lim(2)]);
        ylim([min(data_tmp2)-2.2,y_lim(2)]);
        set(gca,'fontsize',28);
        set(gca,'linewidth',2);
        
        box off
        
        title('Trial correlation','fontsize',28);
        pn_out = sprintf('%s/%s_%s_%s_%s_%s_%slock_dot.png',dir_out,sbj_name,eleclabels,title_conds,project_name,freq_band,locktype);
        savePNG(gcf, 300, pn_out)
        
        close all
    end
    
    [R,P] = corrcoef(data_tmp1,data_tmp2);
    
    r_value(ei,1)=R(2,1);
    p_value(ei,1)=P(2,1);
    elec_labels{ei,1}=eleclabels;
  
end
data=table;
data.elabels=elec_labels;
data.r=r_value;
data.p=p_value;

save(fn,'data')
end




