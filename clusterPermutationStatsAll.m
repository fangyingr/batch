function [pval, t_orig, clust_info, seed_state, est_alpha,timing,issig,time_events] = clusterPermutationStatsAll(sbj_name,project_name,block_names,dirs,elecs,freq_band,locktype,column,conds,stats_params,datatype,isplot,plot_params,region_tag)
%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs: can select subset of electrodes to epoch (default: all)
%              (if specifying elecs, can either be vectors of elec #s or cells of elec names)
%       datatype: 'CAR','HFB',or 'Spec'
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)
%               can group multiple conds together by having a cell of cells
%               (e.g. conds = {{'math'},{'autobio','self-internal'}})
%       col:    colors to use for plotting each condition (otherwise will
%               generate randomly)
%       stats_params:    controls plot features (see genPlotParams.m script)


load('cdcol.mat')


if isempty(stats_params)
    stats_params = genStatsParams(project_name);
end

if isempty(plot_params)
    
    if strcmp(datatype,'Band')
        plot_params = genPlotParams(project_name,'timecourse');
    elseif strcmp(datatype, 'Spec')
        plot_params = genPlotParams(project_name,'ERSP');
    end
end
% keep track of bad chans (from any block) for labeling plots
bad_chans = [];
for bi = 1:length(block_names)
    load([dirs.data_root,filesep,'originalData',filesep,sbj_name,filesep,'global_',project_name,'_',sbj_name,'_',block_names{bi},'.mat'])
    bad_chans = union(bad_chans,globalVar.badChan);
end

if iscell(elecs)
    elecs = ChanNamesToNums(globalVar,elecs);
end

if isempty(elecs)
    elecs = setdiff(1:globalVar.nchan,globalVar.refChan);
end

dir_out = [dirs.result_root,filesep,project_name,filesep,sbj_name,filesep,'Stats',filesep,datatype,'Data',filesep,freq_band,filesep,locktype,'lock'];


%% loop through electrodes and plot

tag = [locktype,'lock'];
if stats_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'wave'}; % concatenate amplitude across blocks

plottag = 'fig';



% determine folder name for plots by compared conditions
for ei = 1
    el = elecs(ei);
    %     data_all = concatBlocks(sbj_name,block_names,dirs,el,datatype,concatfield,tag);
    data_all = concatBlocks(sbj_name,block_names,dirs,el,freq_band,datatype,concatfield,tag);
    
    groupall = false;
    
    
    if isempty(conds)
        tmp = find(~cellfun(@isempty,(data_all.trialinfo.(column))));
        conds = unique(data_all.trialinfo.(column)(tmp));
    end
    cond_names = groupCondNames(conds,groupall);
end

folder_name = cond_names{1};
for gi = 2:length(cond_names)
    folder_name = [folder_name,'_',cond_names{gi}];
end
dir_out = [dir_out,filesep,folder_name];
if ~exist(dir_out)
    mkdir(dir_out)
end
k=0;
% Plotting
for ei = 1:length(elecs)
    el = elecs(ei);
    
    %     data_all = concatBlocks(sbj_name,block_names,dirs,el,datatype,concatfield,tag);
    data_all = concatBlocks(sbj_name,block_names,dirs,el,freq_band,datatype,concatfield,tag);
    if strcmp(stats_params.noise_method,'timepts')
        data_all = removeBadTimepts(data_all,stats_params.noise_fields_timepts);
    end
    if ismember(el,bad_chans)
        tagchan = ' (bad)';
    else
        tagchan = ' (good)';
    end
    
    %% cluster based permutation test
    disp([sbj_name,'_',num2str(el),region_tag]);
    [pval{ei}, t_orig{ei}, clust_info{ei}, seed_state, est_alpha,timing(ei),issig(ei),time_events]=clusterPermutationStats(data_all,column,conds,stats_params,isplot,plot_params,datatype);

    if issig(ei)
    if strcmp(plot_params.label,'name')
        suptitle([data_all.label,tagchan])
    elseif strcmp(plot_params.label,'number')
        suptitle(['Elec ',num2str(el),tagchan])
    end
   
    fn_out = sprintf('%s/%s_%s_%s_%s_%slock_%s%s.png',dir_out,sbj_name,data_all.label,project_name,freq_band,locktype,folder_name,plottag);
    savePNG(gcf, 200, fn_out)
    close
    end  
end
   fm_out = sprintf('%s/%s_%s_%s_%s_%slock_%s_%s.mat',dir_out,sbj_name,data_all.label,project_name,freq_band,locktype,folder_name,region_tag);
   save(fm_out,'elecs','pval','t_orig','clust_info','time_events');
end




